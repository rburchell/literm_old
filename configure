#!/bin/sh
#
# Yat configuration script.
# Based on libcommuni's configure.
#

BUILD_TREE=`/bin/pwd`
SOURCE_TREE=`dirname $0`
SOURCE_TREE=`cd "$SOURCE_TREE"; /bin/pwd`
CONFIG_VARS="$BUILD_TREE/.config.vars"

INSTALL_PREFIX=
INSTALL_QML=

BUILD_TESTS=yes
ENABLE_COVERAGE=no

QMAKE_CONFIG=
QMAKE_PARAMS=
QMAKE_DEBUG=
QMAKE_SPEC=
OPT_HELP=no

QMAKE=`which qmake || which qmake-qt5` 2>/dev/null

if [ -f "$CONFIG_VARS" ]; then
    rm "$CONFIG_VARS"
fi

#-------------------------------------------------------------------------------
# parse command line arguments
#-------------------------------------------------------------------------------

# parse the arguments, setting things to "yes" or "no"
while [ "$#" -gt 0 ]; do
    CURRENT_OPT="$1"
    UNKNOWN_ARG=no
    case "$1" in
    #Autoconf style options
    --enable-*)
        VAR=`echo $1 | sed "s,^--enable-\(.*\),\1,"`
        VAL=yes
        ;;
    --disable-*)
        VAR=`echo $1 | sed "s,^--disable-\(.*\),\1,"`
        VAL=no
        ;;
    --*=*)
        VAR=`echo $1 | sed "s,^--\(.*\)=.*,\1,"`
        VAL=`echo $1 | sed "s,^--.*=\(.*\),\1,"`
        ;;
    --nomake|--make|--prefix|--qmldir|--qmake|--spec|--config|--var)
        VAR=`echo $1 | sed "s,^--\(.*\),\1,"`
        shift
        VAL="$1"
        ;;
    --no-*)
        VAR=`echo $1 | sed "s,^--no-\(.*\),\1,"`
        VAL=no
        ;;
    --*)
        VAR=`echo $1 | sed "s,^--\(.*\),\1,"`
        VAL=yes
        ;;
    #Qt style options that pass an argument
    -nomake|-make|-prefix|-qmldir|-qmake|-spec|-config|-var)
        VAR=`echo $1 | sed "s,^-\(.*\),\1,"`
        shift
        VAL="$1"
        ;;
    -*)
        VAR=`echo $1 | sed 's,^-\(.*\),\1,'`
        VAL=unknown
        ;;
    *)
        UNKNOWN_ARG=yes
        ;;
    esac
    if [ "$UNKNOWN_ARG" = "yes" ]; then
        echo "$1: unknown argument"
        OPT_HELP=yes
        ERROR=yes
        shift
        continue
    fi
    shift

    UNKNOWN_OPT=no
    case "$VAR" in
    prefix)
        INSTALL_PREFIX="$VAL"
        ;;
    qmldir)
        INSTALL_QML="$VAL"
        ;;
    nomake)
        case "$VAL" in
        tests)
            BUILD_TESTS=no
            ;;
        *)
            CURRENT_OPT="$VAL"
            UNKNOWN_OPT=yes
            ;;
        esac
        ;;
    make)
        case "$VAL" in
        tests)
            BUILD_TESTS=yes
            ;;
        *)
            CURRENT_OPT="$VAL"
            UNKNOWN_OPT=yes
            ;;
        esac
        ;;
    coverage)
        ENABLE_COVERAGE=yes
        ;;
    verbose)
        QMAKE_CONFIG="$QMAKE_CONFIG verbose"
        ;;
    qmake)
        QMAKE="$VAL"
        ;;
    spec)
        QMAKE_SPEC="$VAL"
        ;;
    config)
        QMAKE_CONFIG="$QMAKE_CONFIG $VAL"
        ;;
    var)
        echo "$VAL" >> "$CONFIG_VARS"
        ;;
    d)
        QMAKE_DEBUG="$QMAKE_DEBUG -d"
        ;;
    h|help)
        OPT_HELP=yes
        ;;
    *)
        UNKNOWN_OPT=yes
        ;;
    esac
    if [ "$UNKNOWN_OPT" = "yes" ]; then
        echo "${CURRENT_OPT}: unknown option"
        OPT_HELP=yes
        ERROR=yes
    fi
done

if [ "$OPT_HELP" = "yes" ]; then
    cat << EOF
Usage:  configure [options]

Installation options:

    -prefix <dir> ............ The installation prefix
    -qmldir <dir> ............ Imports for QML2 will be installed to <dir>/Yat
                               (default QT_INSTALL_QML/Yat)

Configure options:

    -verbose ................. Verbose build output
    -qmake ................... qmake to use
    -config (config) ......... Additional configuration options recognized by qmake
                               (eg. -config warn_off)
    -var (value) ............. Additional variables recognized by qmake
                               (eg. -var "QMAKE_LFLAGS += -L/path/to/some/lib")
    -make (part) ............. Add part to the list of parts to be built at
                               make time (available parts: examples tests)
    -nomake (part) ........... Exclude part from the list of parts to be built

EOF
    [ "x$ERROR" = "xyes" ] && exit 1
    exit 0
fi

if [ ! -f "$QMAKE" ]; then
    echo "ERROR: Unable to find qmake. Try $0 -qmake /path/to/qmake."
    exit 1
fi

if [ "$INSTALL_PREFIX" != "" ]; then
    [ "$INSTALL_QML" = "" ] && INSTALL_QML="$INSTALL_PREFIX/qml"
fi
[ "$INSTALL_QML" != "" ] && QMAKE_PARAMS="$QMAKE_PARAMS YAT_INSTALL_QML=$INSTALL_QML"

[ "$INSTALL_QML" = "" ] && INSTALL_QML=`$QMAKE -query QT_INSTALL_QML`

[ "$BUILD_TESTS" = "no" ] && QMAKE_PARAMS="$QMAKE_PARAMS -config no_tests"
[ "$ENABLE_COVERAGE" = "yes" ] && QMAKE_PARAMS="$QMAKE_PARAMS -config coverage"

[ "$QMAKE_SPEC" != "" ] && QMAKE_SPEC="-spec $QMAKE_SPEC"

echo
echo "Running $QMAKE $QMAKE_SPEC..."

$QMAKE $QMAKE_SPEC $QMAKE_DEBUG $QMAKE_PARAMS "CONFIG+=$QMAKE_CONFIG" -r $SOURCE_TREE/yat.pro
if [ $? != 0 ]; then
    echo "ERROR: qmake run failed."
    exit 1
fi

echo
echo "Yat build configuration:"
if [ "$QMAKE_CONFIG" != "" ]; then
    echo "Configuration ...................$QMAKE_CONFIG"
fi
echo "Tests ........................... $BUILD_TESTS"
echo "Coverage ........................ $ENABLE_COVERAGE"
echo
echo "Install QML2 imports ............ $INSTALL_QML"
echo
echo Yat is now configured for building. Just run \'make\'.
echo
